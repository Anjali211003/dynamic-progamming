//{ Driver Code Starts
// Initial Template for c++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++
const int d=1001;
int t[d][d];
class Solution{
public:
   bool isPalindrome(string str,int i,int j){
       while(i<=j){
           if(str[i]!=str[j])
           return false;
          
           i++;
           j--;
        }
        return true;
   } 
    int solve(string str,int i,int j){
       
        
        if(t[i][j]!=-1)
         return t[i][j];
        if(i>=j||isPalindrome(str,i,j)==true)
        { t[i][j]=0;
         return 0;
        }
         int ans=INT_MAX,temp;
         for(int k=i;k<j;k++){
             temp=solve(str,i,k)+solve(str,k+1,j)+1;
             ans=min(ans,temp);
         }
         
         return t[i][j]=ans;
    }
    int palindromicPartition(string str)
    { int n=str.size();
    memset(t, -1, sizeof(t));
      int ans=solve(str,0,n-1);
      return ans;
    }
};

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        string str;
        cin>>str;
        
        Solution ob;
        cout<<ob.palindromicPartition(str)<<"\n";
    }
    return 0;
}
// } Driver Code Ends
