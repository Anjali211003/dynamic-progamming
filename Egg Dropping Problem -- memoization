
class Solution
{
    public:

    const int D=101;
    int t[D][D];
    //Function to find minimum number of attempts needed in 
    //order to find the critical floor.
    int solve(int e,int f){
    if(t[e][f]!=-1){
     return t[e][f];
      }
    if(f==0 || f==1){
        
        return f;
    }
    if(e==1){
       
        return f;
    }
      int mn=INT_MAX;
    for(int k=1;k<=f;k++){
        int low,high;
        if(t[e-1][k-1]!=-1)
         low=t[e-1][k-1];
         else
         {
             low=solve(e-1,k-1);
             t[e-1][k-1]=low;
         }
           if(t[e][f-k]!=-1)
            high=t[e][f-k];
         else
         {
             high=solve(e,f-k);
             t[e-1][f-k]=high;
         }
         int temp=1+max(low,high);
        mn=min(mn,temp);
    }

        return t[e][f] = mn;

   
    
}
    int eggDrop(int n, int k) 
    { memset(t,-1,sizeof(t));
        int ans=solve(n,k);
        return ans;
    }

        
    
};

