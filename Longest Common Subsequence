/* Recursive Approach */

class Solution
{
    public:
    //Function to find the length of longest common subsequence in two strings.
    int lcs(int n, int m, string s1, string s2)
    {
        if(n==0 || m==0)
        return 0;
        
        if(s1[n-1]==s2[m-1])
        return 1+lcs(n-1,m-1,s1,s2);
        
        else
        return max(lcs(n,m-1,s1,s2),lcs(n-1,m,s1,s2));
    }
};

/* Memoization   */

#include<bits/stdc++.h>
const int mod=1e9+7;
using namespace std;
int t[1001][1001];

class Solution
{
    public:
    
    int lcs(int n, int m, string s1, string s2)
    { 
        if(n==0 || m==0)
        return 0;
        
        if(t[n][m]!=-1)
        return t[n][m];
        else{
        if(s1[n-1]==s2[m-1])
        return t[n][m]=1+lcs(n-1,m-1,s1,s2);
        
        else
        return t[n][m]= max(lcs(n,m-1,s1,s2),lcs(n-1,m,s1,s2));
        }
        return t[n][m];
    }
};



int main()
{
    int t,n,m;
    cin>>t;
    while(t--)
    {
        cin>>n>>m;          
        string s1,s2;
        cin>>s1>>s2;        
        Solution ob;
memset(t,-1,sizeof(t));
        cout << ob.lcs(n, m, s1, s2) << endl;
    }
    return 0;
}


/* Top Down Approach */

#include<bits/stdc++.h>
const int mod=1e9+7;
using namespace std;
class Solution
{
    public:
 
    int lcs(int n, int m, string s1, string s2)
    { 
        int t[n+1][m+1];
        if(n==0 || m==0)
        return 0;
       
      for(int i=0;i<=n;i++){
          for(int j=0;j<=m;j++){
              if(i==0 || j==0)
              t[i][j]=0;
              }
      }
    for(int i=1;i<=n;i++){
          for(int j=1;j<=m;j++){
        if(s1[i-1]==s2[j-1])
           t[i][j]=1+t[i-1][j-1];
        
        else
          t[i][j]= max(t[i][j-1],t[i-1][j]);
              
          }
    }
      
        return t[n][m];
    }
};




